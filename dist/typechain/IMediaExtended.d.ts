/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMediaExtendedInterface extends ethers.utils.Interface {
  functions: {
    "acceptBid(uint256,tuple)": FunctionFragment;
    "auctionTransfer(uint256,address)": FunctionFragment;
    "marketContract()": FunctionFragment;
    "mint(tuple,tuple)": FunctionFragment;
    "mintWithSig(address,tuple,tuple,tuple)": FunctionFragment;
    "permit(address,uint256,tuple)": FunctionFragment;
    "removeAsk(uint256)": FunctionFragment;
    "removeBid(uint256)": FunctionFragment;
    "revokeApproval(uint256)": FunctionFragment;
    "setAsk(uint256,tuple)": FunctionFragment;
    "setBid(uint256,tuple)": FunctionFragment;
    "tokenMetadataURI(uint256)": FunctionFragment;
    "updateTokenMetadataURI(uint256,string)": FunctionFragment;
    "updateTokenURI(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionTransfer",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithSig",
    values: [
      string,
      {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      BigNumberish,
      { deadline: BigNumberish; v: BigNumberish; r: BytesLike; s: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeApproval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAsk",
    values: [BigNumberish, { amount: BigNumberish; currency: string }]
  ): string;
  encodeFunctionData(
    functionFragment: "setBid",
    values: [
      BigNumberish,
      {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMetadataURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenMetadataURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenURI",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenURI",
    data: BytesLike
  ): Result;

  events: {
    "TokenMetadataURIUpdated(uint256,address,string)": EventFragment;
    "TokenURIUpdated(uint256,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenMetadataURIUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenURIUpdated"): EventFragment;
}

export class IMediaExtended extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMediaExtendedInterface;

  functions: {
    acceptBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "marketContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAsk(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBid(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAsk(uint256,(uint256,address))"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptBid(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptBid(uint256,(uint256,address,address,address,(uint256)))"(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionTransfer(
    tokenId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "auctionTransfer(uint256,address)"(
    tokenId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "marketContract()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))"(
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithSig(
    creator: string,
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
    creator: string,
    data: {
      tokenURI: string;
      metadataURI: string;
      contentHash: BytesLike;
      metadataHash: BytesLike;
    },
    bidShares: {
      prevOwner: { value: BigNumberish };
      creator: { value: BigNumberish };
      owner: { value: BigNumberish };
    },
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  permit(
    spender: string,
    tokenId: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
    spender: string,
    tokenId: BigNumberish,
    sig: {
      deadline: BigNumberish;
      v: BigNumberish;
      r: BytesLike;
      s: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAsk(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeAsk(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBid(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeBid(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeApproval(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeApproval(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAsk(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAsk(uint256,(uint256,address))"(
    tokenId: BigNumberish,
    ask: { amount: BigNumberish; currency: string },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBid(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBid(uint256,(uint256,address,address,address,(uint256)))"(
    tokenId: BigNumberish,
    bid: {
      amount: BigNumberish;
      currency: string;
      bidder: string;
      recipient: string;
      sellOnShare: { value: BigNumberish };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMetadataURI(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "tokenMetadataURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  updateTokenMetadataURI(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateTokenMetadataURI(uint256,string)"(
    tokenId: BigNumberish,
    metadataURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenURI(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateTokenURI(uint256,string)"(
    tokenId: BigNumberish,
    tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "acceptBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    marketContract(overrides?: CallOverrides): Promise<string>;

    "marketContract()"(overrides?: CallOverrides): Promise<string>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    removeAsk(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBid(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "removeBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "setAsk(uint256,(uint256,address))"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    TokenMetadataURIUpdated(
      _tokenId: BigNumberish | null,
      owner: null,
      _uri: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenId: BigNumber; owner: string; _uri: string }
    >;

    TokenURIUpdated(
      _tokenId: BigNumberish | null,
      owner: null,
      _uri: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { _tokenId: BigNumber; owner: string; _uri: string }
    >;
  };

  estimateGas: {
    acceptBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "marketContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAsk(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBid(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAsk(uint256,(uint256,address))"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionTransfer(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "auctionTransfer(uint256,address)"(
      tokenId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "marketContract()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mint((string,string,bytes32,bytes32),((uint256),(uint256),(uint256)))"(
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithSig(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintWithSig(address,(string,string,bytes32,bytes32),((uint256),(uint256),(uint256)),(uint256,uint8,bytes32,bytes32))"(
      creator: string,
      data: {
        tokenURI: string;
        metadataURI: string;
        contentHash: BytesLike;
        metadataHash: BytesLike;
      },
      bidShares: {
        prevOwner: { value: BigNumberish };
        creator: { value: BigNumberish };
        owner: { value: BigNumberish };
      },
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    permit(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,uint256,(uint256,uint8,bytes32,bytes32))"(
      spender: string,
      tokenId: BigNumberish,
      sig: {
        deadline: BigNumberish;
        v: BigNumberish;
        r: BytesLike;
        s: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAsk(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeAsk(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBid(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeBid(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeApproval(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeApproval(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAsk(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAsk(uint256,(uint256,address))"(
      tokenId: BigNumberish,
      ask: { amount: BigNumberish; currency: string },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBid(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBid(uint256,(uint256,address,address,address,(uint256)))"(
      tokenId: BigNumberish,
      bid: {
        amount: BigNumberish;
        currency: string;
        bidder: string;
        recipient: string;
        sellOnShare: { value: BigNumberish };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMetadataURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenMetadataURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTokenMetadataURI(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateTokenMetadataURI(uint256,string)"(
      tokenId: BigNumberish,
      metadataURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenURI(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateTokenURI(uint256,string)"(
      tokenId: BigNumberish,
      tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
